#!/usr/bin/python

import sys
import re


class Circle:
    threshold = 0.05   # 5%

    def __init__(self, cx, cy, r):
        self.cx = float(cx)
        self.cy = float(cy)
        self.r = float(r)

    def isSameAs(self, other):
        return self.approxeq(self.cx, other.cx) and \
            self.approxeq(self.cy, other.cy) and \
            self.approxeq(self.r, other.r)

    def approxeq(self, v1, v2):
        diff = abs(v1 - v2) / abs(v1)
        return (diff <= Circle.threshold)


class Event:
    def __init__(self, bid):
        self.circles = []
        self.batchId = bid

    def append(self, circle):
        # in case the circle matches the one already pushed into this event, just ignore it!
        for ref in self.circles:
            if circle.isSameAs(ref):
                return
        self.circles.append(circle)

    def compare(self, refEvent):
        if len(self.circles) < len(refEvent.circles):
            print('FAIL: Event-%d: Number of result circles [%d] is less than that of reference! [%d]' %\
                  (self.batchId, len(self.circles), len(refEvent.circles)))
            return False
        alreadyMatched = [False  for r in refEvent.circles]
        numMatchesFound = 0
        for result in self.circles:
            matchFound = False
            for i in range(0,len(refEvent.circles)):
                # should not use circles in reference batch already matched with previous ones in the result
                if alreadyMatched[i]:
                    continue
                #print('%f %f %f  ->  %f %f %f' % (result.cx, result.cy, result.r, refEvent.circles[i].cx, refEvent.circles[i].cy, refEvent.circles[i].r))
                if result.isSameAs(refEvent.circles[i]):
                    alreadyMatched[i] = True
                    matchFound = True
                    #print(' ---> SAME')
                    break
                #else:
                #    print(' ---> DIFF')
            if matchFound:
                numMatchesFound += 1
            else:
                print('FAIL: Event-%d: Circle (%f,%f,%f) could not be matched with the reference!' %\
                      (self.batchId, result.cx, result.cy, result.r))
        return (numMatchesFound == len(self.circles))


def readAllEventesIn(fname):
    batches = []
    currEvent = None
    for line in open(fname):
        match_event  = re.match(r"^Event:\s*(\d+)\s*$", line)
        match_time   = re.match(r"^Time:\s*([\d.]*\d)\s*ms\s*$", line)
        if match_event:
            eid = int(match_event.group(1))
            if currEvent is not None:
                batches.append(currEvent)
            currEvent = Event(eid)
        elif match_time:
            pass
        else:
            arr = re.split(r'\s+', line)
            currEvent.append(Circle(arr[0], arr[1], arr[2]))
    if currEvent is not None:
        batches.append(currEvent)
    return batches


def main(fname_result, fname_ref):
    resEvent = readAllEventesIn(fname_result)
    refEvent = readAllEventesIn(fname_ref)
    if len(resEvent) != len(refEvent):
        print('FAIL: Length of result batches [%d] do not match with that of reference! [%d]' %\
              (len(resEvent), len(refEvent)))
        return 1
    misMatchOccured = False
    for i in range(0,len(refEvent)):
        #if resEvent[i].batchId != refEvent[i].batchId:
        #    print('FAIL: Result batch ID [%d] does not match with that of reference! [%d]' %\
        #          (resEvent[i].batchId, refEvent[i].batchId))
        #    misMatchOccured = True
        if not resEvent[i].compare(refEvent[i]):
            misMatchOccured = True
    if misMatchOccured:
        return 1
    print('PASS!')
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1], sys.argv[2]))
